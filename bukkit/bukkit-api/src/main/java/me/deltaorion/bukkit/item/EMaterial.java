package me.deltaorion.bukkit.item;

import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import me.deltaorion.bukkit.plugin.UnsupportedVersionException;
import me.deltaorion.common.plugin.version.MinecraftVersion;
import net.jcip.annotations.Immutable;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SpawnEggMeta;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.regex.Pattern;

/**
 *  Enum that represents all materials for All versions
 */

public enum EMaterial {
    AIR(9648, 0, 8),
    STONE(22948, 1, 8),
    GRANITE(21091, 1, 8),
    POLISHED_GRANITE(5477, 1, 8),
    DIORITE(24688, 1, 8),
    POLISHED_DIORITE(31615, 1, 8),
    ANDESITE(25975, 1, 8),
    POLISHED_ANDESITE(8335, 1, 8),
    DEEPSLATE(26842, -1, 17),
    COBBLED_DEEPSLATE(8021, -1, 17),
    POLISHED_DEEPSLATE(31772, -1, 17),
    CALCITE(20311, -1, 17),
    TUFF(24364, -1, 17),
    DRIPSTONE_BLOCK(26227, -1, 17),
    GRASS_BLOCK(28346, 2, 8),
    DIRT(10580, 3, 8),
    COARSE_DIRT(15411, 3, 8),
    PODZOL(24068, 3, 8),
    ROOTED_DIRT(11410, -1, 17),
    CRIMSON_NYLIUM(18139, -1, 16),
    WARPED_NYLIUM(26396, -1, 16),
    COBBLESTONE(32147, 4, 8),
    OAK_PLANKS(14905, 5, 8),
    SPRUCE_PLANKS(14593, 5, 8),
    BIRCH_PLANKS(29322, 5, 8),
    JUNGLE_PLANKS(26445, 5, 8),
    ACACIA_PLANKS(31312, 5, 8),
    DARK_OAK_PLANKS(20869, 5, 8),
    CRIMSON_PLANKS(18812, -1, 16),
    WARPED_PLANKS(16045, -1, 16),
    OAK_SAPLING(9636, 6, 8),
    SPRUCE_SAPLING(19874, 6, 8),
    BIRCH_SAPLING(31533, 6, 8),
    JUNGLE_SAPLING(17951, 6, 8),
    ACACIA_SAPLING(20806, 6, 8),
    DARK_OAK_SAPLING(14933, 6, 8),
    BEDROCK(23130, 7, 8),
    SAND(11542, 12, 8),
    RED_SAND(16279, 12, 8),
    GRAVEL(7804, 13, 8),
    COAL_ORE(30965, 16, 8),
    DEEPSLATE_COAL_ORE(16823, -1, 17),
    IRON_ORE(19834, 15, 8),
    DEEPSLATE_IRON_ORE(26021, -1, 17),
    COPPER_ORE(32666, -1, 17),
    DEEPSLATE_COPPER_ORE(6588, -1, 17),
    GOLD_ORE(32625, 14, 8),
    DEEPSLATE_GOLD_ORE(13582, -1, 17),
    REDSTONE_ORE(10887, 73, 8),
    DEEPSLATE_REDSTONE_ORE(6331, -1, 17),
    EMERALD_ORE(16630, 129, 8),
    DEEPSLATE_EMERALD_ORE(5299, -1, 17),
    LAPIS_ORE(22934, 21, 8),
    DEEPSLATE_LAPIS_ORE(13598, -1, 17),
    DIAMOND_ORE(9292, 56, 8),
    DEEPSLATE_DIAMOND_ORE(17792, -1, 17),
    NETHER_GOLD_ORE(4185, -1, 16),
    NETHER_QUARTZ_ORE(4807, 153, 8),
    ANCIENT_DEBRIS(18198, -1, 16),
    COAL_BLOCK(27968, 173, 8),
    RAW_IRON_BLOCK(32210, -1, 17),
    RAW_COPPER_BLOCK(17504, -1, 17),
    RAW_GOLD_BLOCK(23246, -1, 17),
    AMETHYST_BLOCK(18919, -1, 17),
    BUDDING_AMETHYST(13963, -1, 17),
    IRON_BLOCK(24754, 42, 8),
    COPPER_BLOCK(12880, -1, 17),
    GOLD_BLOCK(27392, 41, 8),
    DIAMOND_BLOCK(5944, 57, 8),
    NETHERITE_BLOCK(6527, -1, 16),
    EXPOSED_COPPER(28488, -1, 17),
    WEATHERED_COPPER(19699, -1, 17),
    OXIDIZED_COPPER(19490, -1, 17),
    CUT_COPPER(32519, -1, 17),
    EXPOSED_CUT_COPPER(18000, -1, 17),
    WEATHERED_CUT_COPPER(21158, -1, 17),
    OXIDIZED_CUT_COPPER(5382, -1, 17),
    CUT_COPPER_STAIRS(25925, -1, 17),
    EXPOSED_CUT_COPPER_STAIRS(31621, -1, 17),
    WEATHERED_CUT_COPPER_STAIRS(5851, -1, 17),
    OXIDIZED_CUT_COPPER_STAIRS(25379, -1, 17),
    CUT_COPPER_SLAB(28988, -1, 17),
    EXPOSED_CUT_COPPER_SLAB(26694, -1, 17),
    WEATHERED_CUT_COPPER_SLAB(4602, -1, 17),
    OXIDIZED_CUT_COPPER_SLAB(29642, -1, 17),
    WAXED_COPPER_BLOCK(14638, -1, 17),
    WAXED_EXPOSED_COPPER(27989, -1, 17),
    WAXED_WEATHERED_COPPER(5960, -1, 17),
    WAXED_OXIDIZED_COPPER(25626, -1, 17),
    WAXED_CUT_COPPER(11030, -1, 17),
    WAXED_EXPOSED_CUT_COPPER(30043, -1, 17),
    WAXED_WEATHERED_CUT_COPPER(13823, -1, 17),
    WAXED_OXIDIZED_CUT_COPPER(22582, -1, 17),
    WAXED_CUT_COPPER_STAIRS(23125, -1, 17),
    WAXED_EXPOSED_CUT_COPPER_STAIRS(15532, -1, 17),
    WAXED_WEATHERED_CUT_COPPER_STAIRS(29701, -1, 17),
    WAXED_OXIDIZED_CUT_COPPER_STAIRS(9842, -1, 17),
    WAXED_CUT_COPPER_SLAB(6271, -1, 17),
    WAXED_EXPOSED_CUT_COPPER_SLAB(22091, -1, 17),
    WAXED_WEATHERED_CUT_COPPER_SLAB(20035, -1, 17),
    WAXED_OXIDIZED_CUT_COPPER_SLAB(11202, -1, 17),
    OAK_LOG(26723, 17, 8),
    SPRUCE_LOG(9726, 17, 8),
    BIRCH_LOG(26727, 17, 8),
    JUNGLE_LOG(20721, 17, 8),
    ACACIA_LOG(8385, 162, 8),
    DARK_OAK_LOG(14831, 162, 8),
    CRIMSON_STEM(27920, -1, 16),
    WARPED_STEM(28920, -1, 16),
    STRIPPED_OAK_LOG(20523, -1, 13),
    STRIPPED_SPRUCE_LOG(6140, -1, 13),
    STRIPPED_BIRCH_LOG(8838, -1, 13),
    STRIPPED_JUNGLE_LOG(15476, -1, 13),
    STRIPPED_ACACIA_LOG(18167, -1, 13),
    STRIPPED_DARK_OAK_LOG(6492, -1, 13),
    STRIPPED_CRIMSON_STEM(16882, -1, 16),
    STRIPPED_WARPED_STEM(15627, -1, 16),
    STRIPPED_OAK_WOOD(31455, -1, 13),
    STRIPPED_SPRUCE_WOOD(6467, -1, 13),
    STRIPPED_BIRCH_WOOD(22350, -1, 13),
    STRIPPED_JUNGLE_WOOD(30315, -1, 13),
    STRIPPED_ACACIA_WOOD(27193, -1, 13),
    STRIPPED_DARK_OAK_WOOD(16000, -1, 13),
    STRIPPED_CRIMSON_HYPHAE(27488, -1, 16),
    STRIPPED_WARPED_HYPHAE(7422, -1, 16),
    OAK_WOOD(7378, 17, 8),
    SPRUCE_WOOD(32328, 17, 8),
    BIRCH_WOOD(20913, 17, 8),
    JUNGLE_WOOD(10341, 17, 8),
    ACACIA_WOOD(9541, 162, 8),
    DARK_OAK_WOOD(16995, 162, 8),
    CRIMSON_HYPHAE(6550, -1, 16),
    WARPED_HYPHAE(18439, -1, 16),
    OAK_LEAVES(4385, 18, 8),
    SPRUCE_LEAVES(20039, 18, 8),
    BIRCH_LEAVES(12601, 18, 8),
    JUNGLE_LEAVES(5133, 18, 8),
    ACACIA_LEAVES(16606, 161, 8),
    DARK_OAK_LEAVES(22254, 161, 8),
    AZALEA_LEAVES(23001, -1, 17),
    FLOWERING_AZALEA_LEAVES(7139, -1, 17),
    SPONGE(15860, 19, 8),
    WET_SPONGE(9043, 19, 8),
    GLASS(6195, 20, 8),
    TINTED_GLASS(19154, -1, 17),
    LAPIS_BLOCK(14485, 22, 8),
    SANDSTONE(13141, 24, 8),
    CHISELED_SANDSTONE(31763, 24, 8),
    CUT_SANDSTONE(6118, 24, 8),
    COBWEB(9469, 30, 8),
    GRASS(6155, 31, 8),
    FERN(15794, 31, 8),
    AZALEA(29386, -1, 17),
    FLOWERING_AZALEA(28270, -1, 17),
    DEAD_BUSH(22888, 31, 8),
    SEAGRASS(23942, -1, 13),
    SEA_PICKLE(19562, -1, 13),
    WHITE_WOOL(8624, 35, 8),
    ORANGE_WOOL(23957, 35, 8),
    MAGENTA_WOOL(11853, 35, 8),
    LIGHT_BLUE_WOOL(21073, 35, 8),
    YELLOW_WOOL(29507, 35, 8),
    LIME_WOOL(10443, 35, 8),
    PINK_WOOL(7611, 35, 8),
    GRAY_WOOL(27209, 35, 8),
    LIGHT_GRAY_WOOL(22936, 35, 8),
    CYAN_WOOL(12221, 35, 8),
    PURPLE_WOOL(11922, 35, 8),
    BLUE_WOOL(15738, 35, 8),
    BROWN_WOOL(32638, 35, 8),
    GREEN_WOOL(25085, 35, 8),
    RED_WOOL(11621, 35, 8),
    BLACK_WOOL(16693, 35, 8),
    DANDELION(30558, 37, 8),
    POPPY(12851, 38, 8),
    BLUE_ORCHID(13432, 38, 8),
    ALLIUM(6871, 38, 8),
    AZURE_BLUET(17608, 38, 8),
    RED_TULIP(16781, 38, 8),
    ORANGE_TULIP(26038, 38, 8),
    WHITE_TULIP(31495, 38, 8),
    PINK_TULIP(27319, 38, 8),
    OXEYE_DAISY(11709, 38, 8),
    CORNFLOWER(15405, -1, 14),
    LILY_OF_THE_VALLEY(7185, -1, 14),
    WITHER_ROSE(8619, -1, 14),
    SPORE_BLOSSOM(20627, -1, 17),
    BROWN_MUSHROOM(9665, 39, 8),
    RED_MUSHROOM(19728, 40, 8),
    CRIMSON_FUNGUS(26268, -1, 16),
    WARPED_FUNGUS(19799, -1, 16),
    CRIMSON_ROOTS(14064, -1, 16),
    WARPED_ROOTS(13932, -1, 16),
    NETHER_SPROUTS(10431, -1, 16),
    WEEPING_VINES(29267, -1, 16),
    TWISTING_VINES(27283, -1, 16),
    SUGAR_CANE(7726, 83, 8),
    KELP(21916, -1, 13),
    MOSS_CARPET(8221, -1, 17),
    MOSS_BLOCK(9175, -1, 17),
    HANGING_ROOTS(15498, -1, 17),
    BIG_DRIPLEAF(26173, -1, 17),
    SMALL_DRIPLEAF(17540, -1, 17),
    BAMBOO(18728, -1, 14),
    OAK_SLAB(12002, 126, 8),
    SPRUCE_SLAB(28798, 126, 8),
    BIRCH_SLAB(13807, 126, 8),
    JUNGLE_SLAB(19117, 126, 8),
    ACACIA_SLAB(23730, 126, 8),
    DARK_OAK_SLAB(28852, 126, 8),
    CRIMSON_SLAB(4691, -1, 16),
    WARPED_SLAB(27150, -1, 16),
    STONE_SLAB(19838, -1, 14),
    SMOOTH_STONE_SLAB(24129, 44, 8),
    SANDSTONE_SLAB(29830, 44, 8),
    CUT_SANDSTONE_SLAB(30944, -1, 14),
    PETRIFIED_OAK_SLAB(18658, 44, 8),
    COBBLESTONE_SLAB(6340, 44, 8),
    BRICK_SLAB(26333, 44, 8),
    STONE_BRICK_SLAB(19676, 44, 8),
    NETHER_BRICK_SLAB(26586, 44, 8),
    QUARTZ_SLAB(4423, 44, 8),
    RED_SANDSTONE_SLAB(17550, 182, 8),
    CUT_RED_SANDSTONE_SLAB(7220, -1, 14),
    PURPUR_SLAB(11487, 205, 9),
    PRISMARINE_SLAB(31323, -1, 13),
    PRISMARINE_BRICK_SLAB(25624, -1, 13),
    DARK_PRISMARINE_SLAB(7577, -1, 13),
    SMOOTH_QUARTZ(14415, 43, 8),
    SMOOTH_RED_SANDSTONE(25180, 181, 8),
    SMOOTH_SANDSTONE(30039, 43, 8),
    SMOOTH_STONE(21910, 43, 8),
    BRICKS(14165, 45, 8),
    BOOKSHELF(10069, 47, 8),
    MOSSY_COBBLESTONE(21900, 48, 8),
    OBSIDIAN(32723, 49, 8),
    TORCH(6063, 50, 8),
    END_ROD(24832, 198, 9),
    CHORUS_PLANT(28243, 199, 9),
    CHORUS_FLOWER(28542, 200, 9),
    PURPUR_BLOCK(7538, 201, 9),
    PURPUR_PILLAR(26718, 202, 9),
    PURPUR_STAIRS(8921, 203, 9),
    SPAWNER(7018, 52, 8),
    OAK_STAIRS(5449, 53, 8),
    CHEST(22969, 54, 8),
    CRAFTING_TABLE(20706, 58, 8),
    FARMLAND(31166, 60, 8),
    FURNACE(8133, 61, 8),
    LADDER(23599, 65, 8),
    COBBLESTONE_STAIRS(24715, 67, 8),
    SNOW(14146, 78, 8),
    ICE(30428, 79, 8),
    SNOW_BLOCK(19913, 80, 8),
    CACTUS(12191, 81, 8),
    CLAY(27880, 82, 8),
    JUKEBOX(19264, 84, 8),
    OAK_FENCE(6442, 85, 8),
    SPRUCE_FENCE(25416, 188, 8),
    BIRCH_FENCE(17347, 189, 8),
    JUNGLE_FENCE(14358, 190, 8),
    ACACIA_FENCE(4569, 192, 8),
    DARK_OAK_FENCE(21767, 191, 8),
    CRIMSON_FENCE(21075, -1, 16),
    WARPED_FENCE(18438, -1, 16),
    PUMPKIN(19170, -1, 13),
    CARVED_PUMPKIN(25833, 86, 8),
    JACK_O_LANTERN(13758, 91, 8),
    NETHERRACK(23425, 87, 8),
    SOUL_SAND(16841, 88, 8),
    SOUL_SOIL(31140, -1, 16),
    BASALT(28478, -1, 16),
    POLISHED_BASALT(11659, -1, 16),
    SMOOTH_BASALT(13617, -1, 17),
    SOUL_TORCH(14292, -1, 16),
    GLOWSTONE(32713, 89, 8),
    INFESTED_STONE(18440, 97, 8),
    INFESTED_COBBLESTONE(4348, 97, 8),
    INFESTED_STONE_BRICKS(19749, 97, 8),
    INFESTED_MOSSY_STONE_BRICKS(9850, 97, 8),
    INFESTED_CRACKED_STONE_BRICKS(7476, 97, 8),
    INFESTED_CHISELED_STONE_BRICKS(4728, 97, 8),
    INFESTED_DEEPSLATE(9472, -1, 17),
    STONE_BRICKS(6962, 98, 8),
    MOSSY_STONE_BRICKS(16415, 98, 8),
    CRACKED_STONE_BRICKS(27869, 98, 8),
    CHISELED_STONE_BRICKS(9087, 98, 8),
    DEEPSLATE_BRICKS(13193, -1, 17),
    CRACKED_DEEPSLATE_BRICKS(17105, -1, 17),
    DEEPSLATE_TILES(11250, -1, 17),
    CRACKED_DEEPSLATE_TILES(26249, -1, 17),
    CHISELED_DEEPSLATE(23825, -1, 17),
    BROWN_MUSHROOM_BLOCK(6291, 99, 8),
    RED_MUSHROOM_BLOCK(20766, 100, 8),
    MUSHROOM_STEM(16543, 99, 8),
    IRON_BARS(9378, 101, 8),
    CHAIN(28265, -1, 16),
    GLASS_PANE(5709, 102, 8),
    MELON(25172, 103, 8),
    VINE(14564, 106, 8),
    GLOW_LICHEN(19165, -1, 17),
    BRICK_STAIRS(21534, 108, 8),
    STONE_BRICK_STAIRS(27032, 109, 8),
    MYCELIUM(9913, 110, 8),
    LILY_PAD(19271, 111, 8),
    NETHER_BRICKS(27802, 112, 8),
    CRACKED_NETHER_BRICKS(10888, -1, 16),
    CHISELED_NETHER_BRICKS(21613, -1, 16),
    NETHER_BRICK_FENCE(5286, 113, 8),
    NETHER_BRICK_STAIRS(12085, 114, 8),
    ENCHANTING_TABLE(16255, 116, 8),
    END_PORTAL_FRAME(15480, 120, 8),
    END_STONE(29686, 121, 8),
    END_STONE_BRICKS(20314, 206, 9),
    DRAGON_EGG(29946, 122, 8),
    SANDSTONE_STAIRS(18474, 128, 8),
    ENDER_CHEST(32349, 130, 8),
    EMERALD_BLOCK(9914, 133, 8),
    SPRUCE_STAIRS(11192, 134, 8),
    BIRCH_STAIRS(7657, 135, 8),
    JUNGLE_STAIRS(20636, 136, 8),
    CRIMSON_STAIRS(32442, -1, 16),
    WARPED_STAIRS(17721, -1, 16),
    COMMAND_BLOCK(4355, 137, 8),
    BEACON(6608, 138, 8),
    COBBLESTONE_WALL(12616, 139, 8),
    MOSSY_COBBLESTONE_WALL(11536, 139, 8),
    BRICK_WALL(18995, -1, 14),
    PRISMARINE_WALL(18184, -1, 14),
    RED_SANDSTONE_WALL(4753, -1, 14),
    MOSSY_STONE_BRICK_WALL(18259, -1, 14),
    GRANITE_WALL(23279, -1, 14),
    STONE_BRICK_WALL(29073, -1, 14),
    NETHER_BRICK_WALL(10398, -1, 14),
    ANDESITE_WALL(14938, -1, 14),
    RED_NETHER_BRICK_WALL(4580, -1, 14),
    SANDSTONE_WALL(18470, -1, 14),
    END_STONE_BRICK_WALL(27225, -1, 14),
    DIORITE_WALL(17412, -1, 14),
    BLACKSTONE_WALL(17327, -1, 16),
    POLISHED_BLACKSTONE_WALL(15119, -1, 16),
    POLISHED_BLACKSTONE_BRICK_WALL(9540, -1, 16),
    COBBLED_DEEPSLATE_WALL(21893, -1, 17),
    POLISHED_DEEPSLATE_WALL(6574, -1, 17),
    DEEPSLATE_BRICK_WALL(13304, -1, 17),
    DEEPSLATE_TILE_WALL(17077, -1, 17),
    ANVIL(18718, 145, 8),
    CHIPPED_ANVIL(10623, 145, 8),
    DAMAGED_ANVIL(10274, 145, 8),
    CHISELED_QUARTZ_BLOCK(30964, 155, 8),
    QUARTZ_BLOCK(11987, 155, 8),
    QUARTZ_BRICKS(23358, -1, 16),
    QUARTZ_PILLAR(16452, 155, 8),
    QUARTZ_STAIRS(24079, 156, 8),
    WHITE_TERRACOTTA(20975, 159, 8),
    ORANGE_TERRACOTTA(18684, 159, 8),
    MAGENTA_TERRACOTTA(25900, 159, 8),
    LIGHT_BLUE_TERRACOTTA(31779, 159, 8),
    YELLOW_TERRACOTTA(32129, 159, 8),
    LIME_TERRACOTTA(24013, 159, 8),
    PINK_TERRACOTTA(23727, 159, 8),
    GRAY_TERRACOTTA(18004, 159, 8),
    LIGHT_GRAY_TERRACOTTA(26388, 159, 8),
    CYAN_TERRACOTTA(25940, 159, 8),
    PURPLE_TERRACOTTA(10387, 159, 8),
    BLUE_TERRACOTTA(5236, 159, 8),
    BROWN_TERRACOTTA(23664, 159, 8),
    GREEN_TERRACOTTA(4105, 159, 8),
    RED_TERRACOTTA(5086, 159, 8),
    BLACK_TERRACOTTA(26691, 159, 8),
    BARRIER(26453, 166, 8),
    LIGHT(17829, -1, 17),
    HAY_BLOCK(17461, 170, 8),
    WHITE_CARPET(15117, 171, 8),
    ORANGE_CARPET(24752, 171, 8),
    MAGENTA_CARPET(6180, 171, 8),
    LIGHT_BLUE_CARPET(21194, 171, 8),
    YELLOW_CARPET(18149, 171, 8),
    LIME_CARPET(15443, 171, 8),
    PINK_CARPET(27381, 171, 8),
    GRAY_CARPET(26991, 171, 8),
    LIGHT_GRAY_CARPET(11317, 171, 8),
    CYAN_CARPET(9742, 171, 8),
    PURPLE_CARPET(5574, 171, 8),
    BLUE_CARPET(13292, 171, 8),
    BROWN_CARPET(23352, 171, 8),
    GREEN_CARPET(7780, 171, 8),
    RED_CARPET(5424, 171, 8),
    BLACK_CARPET(6056, 171, 8),
    TERRACOTTA(16544, 172, 8),
    PACKED_ICE(28993, 174, 8),
    ACACIA_STAIRS(17453, 163, 8),
    DARK_OAK_STAIRS(22921, 164, 8),
    DIRT_PATH(10846, 208, 9),
    SUNFLOWER(7408, 175, 8),
    LILAC(22837, 175, 8),
    ROSE_BUSH(6080, 175, 8),
    PEONY(21155, 175, 8),
    TALL_GRASS(21559, 175, 8),
    LARGE_FERN(30177, 175, 8),
    WHITE_STAINED_GLASS(31190, 95, 8),
    ORANGE_STAINED_GLASS(25142, 95, 8),
    MAGENTA_STAINED_GLASS(26814, 95, 8),
    LIGHT_BLUE_STAINED_GLASS(17162, 95, 8),
    YELLOW_STAINED_GLASS(12182, 95, 8),
    LIME_STAINED_GLASS(24266, 95, 8),
    PINK_STAINED_GLASS(16164, 95, 8),
    GRAY_STAINED_GLASS(29979, 95, 8),
    LIGHT_GRAY_STAINED_GLASS(5843, 95, 8),
    CYAN_STAINED_GLASS(30604, 95, 8),
    PURPLE_STAINED_GLASS(21845, 95, 8),
    BLUE_STAINED_GLASS(7107, 95, 8),
    BROWN_STAINED_GLASS(20945, 95, 8),
    GREEN_STAINED_GLASS(22503, 95, 8),
    RED_STAINED_GLASS(9717, 95, 8),
    BLACK_STAINED_GLASS(13941, 95, 8),
    WHITE_STAINED_GLASS_PANE(10557, 160, 8),
    ORANGE_STAINED_GLASS_PANE(21089, 160, 8),
    MAGENTA_STAINED_GLASS_PANE(14082, 160, 8),
    LIGHT_BLUE_STAINED_GLASS_PANE(18721, 160, 8),
    YELLOW_STAINED_GLASS_PANE(20298, 160, 8),
    LIME_STAINED_GLASS_PANE(10610, 160, 8),
    PINK_STAINED_GLASS_PANE(24637, 160, 8),
    GRAY_STAINED_GLASS_PANE(25272, 160, 8),
    LIGHT_GRAY_STAINED_GLASS_PANE(19008, 160, 8),
    CYAN_STAINED_GLASS_PANE(11784, 160, 8),
    PURPLE_STAINED_GLASS_PANE(10948, 160, 8),
    BLUE_STAINED_GLASS_PANE(28484, 160, 8),
    BROWN_STAINED_GLASS_PANE(17557, 160, 8),
    GREEN_STAINED_GLASS_PANE(4767, 160, 8),
    RED_STAINED_GLASS_PANE(8630, 160, 8),
    BLACK_STAINED_GLASS_PANE(13201, 160, 8),
    PRISMARINE(7539, 168, 8),
    PRISMARINE_BRICKS(29118, 168, 8),
    DARK_PRISMARINE(19940, 168, 8),
    PRISMARINE_STAIRS(19217, -1, 13),
    PRISMARINE_BRICK_STAIRS(15445, -1, 13),
    DARK_PRISMARINE_STAIRS(26511, -1, 13),
    SEA_LANTERN(20780, 169, 8),
    RED_SANDSTONE(9092, 179, 8),
    CHISELED_RED_SANDSTONE(15529, 179, 8),
    CUT_RED_SANDSTONE(29108, 179, 8),
    RED_SANDSTONE_STAIRS(25466, 180, 8),
    REPEATING_COMMAND_BLOCK(12405, 210, 9),
    CHAIN_COMMAND_BLOCK(26798, 211, 9),
    MAGMA_BLOCK(25927, 213, 10),
    NETHER_WART_BLOCK(15486, 214, 10),
    WARPED_WART_BLOCK(15463, -1, 16),
    RED_NETHER_BRICKS(18056, 215, 10),
    BONE_BLOCK(17312, 216, 10),
    STRUCTURE_VOID(30806, 217, 10),
    SHULKER_BOX(7776, 229, 11),
    WHITE_SHULKER_BOX(31750, 219, 11),
    ORANGE_SHULKER_BOX(21673, 220, 11),
    MAGENTA_SHULKER_BOX(21566, 221, 11),
    LIGHT_BLUE_SHULKER_BOX(18226, 222, 11),
    YELLOW_SHULKER_BOX(28700, 223, 11),
    LIME_SHULKER_BOX(28360, 224, 11),
    PINK_SHULKER_BOX(24968, 225, 11),
    GRAY_SHULKER_BOX(12754, 226, 11),
    LIGHT_GRAY_SHULKER_BOX(21345, 227, 11),
    CYAN_SHULKER_BOX(28123, 228, 11),
    PURPLE_SHULKER_BOX(10373, 229, 11),
    BLUE_SHULKER_BOX(11476, 230, 11),
    BROWN_SHULKER_BOX(24230, 231, 11),
    GREEN_SHULKER_BOX(9377, 232, 11),
    RED_SHULKER_BOX(32448, 233, 11),
    BLACK_SHULKER_BOX(24076, 234, 11),
    WHITE_GLAZED_TERRACOTTA(11326, 235, 12),
    ORANGE_GLAZED_TERRACOTTA(27451, 236, 12),
    MAGENTA_GLAZED_TERRACOTTA(8067, 237, 12),
    LIGHT_BLUE_GLAZED_TERRACOTTA(4336, 238, 12),
    YELLOW_GLAZED_TERRACOTTA(10914, 239, 12),
    LIME_GLAZED_TERRACOTTA(13861, 240, 12),
    PINK_GLAZED_TERRACOTTA(10260, 241, 12),
    GRAY_GLAZED_TERRACOTTA(6256, 242, 12),
    LIGHT_GRAY_GLAZED_TERRACOTTA(10707, 243, 12),
    CYAN_GLAZED_TERRACOTTA(9550, 244, 12),
    PURPLE_GLAZED_TERRACOTTA(4818, 245, 12),
    BLUE_GLAZED_TERRACOTTA(23823, 246, 12),
    BROWN_GLAZED_TERRACOTTA(5655, 247, 12),
    GREEN_GLAZED_TERRACOTTA(6958, 248, 12),
    RED_GLAZED_TERRACOTTA(24989, 249, 12),
    BLACK_GLAZED_TERRACOTTA(29678, 250, 12),
    WHITE_CONCRETE(6281, 251, 12),
    ORANGE_CONCRETE(19914, 251, 12),
    MAGENTA_CONCRETE(20591, 251, 12),
    LIGHT_BLUE_CONCRETE(29481, 251, 12),
    YELLOW_CONCRETE(15722, 251, 12),
    LIME_CONCRETE(5863, 251, 12),
    PINK_CONCRETE(5227, 251, 12),
    GRAY_CONCRETE(13959, 251, 12),
    LIGHT_GRAY_CONCRETE(14453, 251, 12),
    CYAN_CONCRETE(26522, 251, 12),
    PURPLE_CONCRETE(20623, 251, 12),
    BLUE_CONCRETE(18756, 251, 12),
    BROWN_CONCRETE(19006, 251, 12),
    GREEN_CONCRETE(17949, 251, 12),
    RED_CONCRETE(8032, 251, 12),
    BLACK_CONCRETE(13338, 251, 12),
    WHITE_CONCRETE_POWDER(10363, 252, 12),
    ORANGE_CONCRETE_POWDER(30159, 252, 12),
    MAGENTA_CONCRETE_POWDER(8272, 252, 12),
    LIGHT_BLUE_CONCRETE_POWDER(31206, 252, 12),
    YELLOW_CONCRETE_POWDER(10655, 252, 12),
    LIME_CONCRETE_POWDER(28859, 252, 12),
    PINK_CONCRETE_POWDER(6421, 252, 12),
    GRAY_CONCRETE_POWDER(13031, 252, 12),
    LIGHT_GRAY_CONCRETE_POWDER(21589, 252, 12),
    CYAN_CONCRETE_POWDER(15734, 252, 12),
    PURPLE_CONCRETE_POWDER(26808, 252, 12),
    BLUE_CONCRETE_POWDER(17773, 252, 12),
    BROWN_CONCRETE_POWDER(21485, 252, 12),
    GREEN_CONCRETE_POWDER(6904, 252, 12),
    RED_CONCRETE_POWDER(13286, 252, 12),
    BLACK_CONCRETE_POWDER(16150, 252, 12),
    TURTLE_EGG(32101, -1, 13),
    DEAD_TUBE_CORAL_BLOCK(28350, -1, 13),
    DEAD_BRAIN_CORAL_BLOCK(12979, -1, 13),
    DEAD_BUBBLE_CORAL_BLOCK(28220, -1, 13),
    DEAD_FIRE_CORAL_BLOCK(5307, -1, 13),
    DEAD_HORN_CORAL_BLOCK(15103, -1, 13),
    TUBE_CORAL_BLOCK(23723, -1, 13),
    BRAIN_CORAL_BLOCK(30618, -1, 13),
    BUBBLE_CORAL_BLOCK(15437, -1, 13),
    FIRE_CORAL_BLOCK(12119, -1, 13),
    HORN_CORAL_BLOCK(19958, -1, 13),
    TUBE_CORAL(23048, -1, 13),
    BRAIN_CORAL(31316, -1, 13),
    BUBBLE_CORAL(12464, -1, 13),
    FIRE_CORAL(29151, -1, 13),
    HORN_CORAL(19511, -1, 13),
    DEAD_BRAIN_CORAL(9116, -1, 13),
    DEAD_BUBBLE_CORAL(30583, -1, 13),
    DEAD_FIRE_CORAL(8365, -1, 13),
    DEAD_HORN_CORAL(5755, -1, 13),
    DEAD_TUBE_CORAL(18028, -1, 13),
    TUBE_CORAL_FAN(19929, -1, 13),
    BRAIN_CORAL_FAN(13849, -1, 13),
    BUBBLE_CORAL_FAN(10795, -1, 13),
    FIRE_CORAL_FAN(11112, -1, 13),
    HORN_CORAL_FAN(13610, -1, 13),
    DEAD_TUBE_CORAL_FAN(17628, -1, 13),
    DEAD_BRAIN_CORAL_FAN(26150, -1, 13),
    DEAD_BUBBLE_CORAL_FAN(17322, -1, 13),
    DEAD_FIRE_CORAL_FAN(27073, -1, 13),
    DEAD_HORN_CORAL_FAN(11387, -1, 13),
    BLUE_ICE(22449, -1, 13),
    CONDUIT(5148, -1, 13),
    POLISHED_GRANITE_STAIRS(29588, -1, 14),
    SMOOTH_RED_SANDSTONE_STAIRS(17561, -1, 14),
    MOSSY_STONE_BRICK_STAIRS(27578, -1, 14),
    POLISHED_DIORITE_STAIRS(4625, -1, 14),
    MOSSY_COBBLESTONE_STAIRS(29210, -1, 14),
    END_STONE_BRICK_STAIRS(28831, -1, 14),
    STONE_STAIRS(23784, -1, 14),
    SMOOTH_SANDSTONE_STAIRS(21183, -1, 14),
    SMOOTH_QUARTZ_STAIRS(19560, -1, 14),
    GRANITE_STAIRS(21840, -1, 14),
    ANDESITE_STAIRS(17747, -1, 14),
    RED_NETHER_BRICK_STAIRS(26374, -1, 14),
    POLISHED_ANDESITE_STAIRS(7573, -1, 14),
    DIORITE_STAIRS(13134, -1, 14),
    COBBLED_DEEPSLATE_STAIRS(20699, -1, 17),
    POLISHED_DEEPSLATE_STAIRS(19513, -1, 17),
    DEEPSLATE_BRICK_STAIRS(29624, -1, 17),
    DEEPSLATE_TILE_STAIRS(6361, -1, 17),
    POLISHED_GRANITE_SLAB(4521, -1, 14),
    SMOOTH_RED_SANDSTONE_SLAB(16304, -1, 14),
    MOSSY_STONE_BRICK_SLAB(14002, -1, 14),
    POLISHED_DIORITE_SLAB(18303, -1, 14),
    MOSSY_COBBLESTONE_SLAB(12139, -1, 14),
    END_STONE_BRICK_SLAB(23239, -1, 14),
    SMOOTH_SANDSTONE_SLAB(9030, -1, 14),
    SMOOTH_QUARTZ_SLAB(26543, -1, 14),
    GRANITE_SLAB(10901, -1, 14),
    ANDESITE_SLAB(32124, -1, 14),
    RED_NETHER_BRICK_SLAB(12462, -1, 14),
    POLISHED_ANDESITE_SLAB(24573, -1, 14),
    DIORITE_SLAB(10715, -1, 14),
    COBBLED_DEEPSLATE_SLAB(17388, -1, 17),
    POLISHED_DEEPSLATE_SLAB(32201, -1, 17),
    DEEPSLATE_BRICK_SLAB(23910, -1, 17),
    DEEPSLATE_TILE_SLAB(13315, -1, 17),
    SCAFFOLDING(15757, -1, 14),
    REDSTONE(11233, 331, 8),
    REDSTONE_TORCH(22547, 76, 8),
    REDSTONE_BLOCK(19496, 152, 8),
    REPEATER(28823, 93, 8),
    COMPARATOR(18911, 149, 8),
    PISTON(21130, 33, 8),
    STICKY_PISTON(18127, 29, 8),
    SLIME_BLOCK(31892, 165, 8),
    HONEY_BLOCK(30615, -1, 15),
    OBSERVER(10726, 218, 11),
    HOPPER(31974, 154, 8),
    DISPENSER(20871, 23, 8),
    DROPPER(31273, 158, 8),
    LECTERN(23490, -1, 14),
    TARGET(22637, -1, 16),
    LEVER(15319, 69, 8),
    LIGHTNING_ROD(30770, -1, 17),
    DAYLIGHT_DETECTOR(8864, 151, 8),
    SCULK_SENSOR(5598, -1, 17),
    TRIPWIRE_HOOK(8130, 131, 8),
    TRAPPED_CHEST(18970, 146, 8),
    TNT(7896, 46, 8),
    REDSTONE_LAMP(8217, 123, 8),
    NOTE_BLOCK(20979, 25, 8),
    STONE_BUTTON(12279, 77, 8),
    POLISHED_BLACKSTONE_BUTTON(20760, -1, 16),
    OAK_BUTTON(13510, 143, 8),
    SPRUCE_BUTTON(23281, -1, 13),
    BIRCH_BUTTON(26934, -1, 13),
    JUNGLE_BUTTON(25317, -1, 13),
    ACACIA_BUTTON(13993, -1, 13),
    DARK_OAK_BUTTON(6214, -1, 13),
    CRIMSON_BUTTON(26799, -1, 16),
    WARPED_BUTTON(25264, -1, 16),
    STONE_PRESSURE_PLATE(22591, 70, 8),
    POLISHED_BLACKSTONE_PRESSURE_PLATE(32340, -1, 16),
    LIGHT_WEIGHTED_PRESSURE_PLATE(14875, 147, 8),
    HEAVY_WEIGHTED_PRESSURE_PLATE(16970, 148, 8),
    OAK_PRESSURE_PLATE(20108, 72, 8),
    SPRUCE_PRESSURE_PLATE(15932, -1, 13),
    BIRCH_PRESSURE_PLATE(9664, -1, 13),
    JUNGLE_PRESSURE_PLATE(11376, -1, 13),
    ACACIA_PRESSURE_PLATE(17586, -1, 13),
    DARK_OAK_PRESSURE_PLATE(31375, -1, 13),
    CRIMSON_PRESSURE_PLATE(18316, -1, 16),
    WARPED_PRESSURE_PLATE(29516, -1, 16),
    IRON_DOOR(4788, 71, 8),
    OAK_DOOR(20341, 64, 8),
    SPRUCE_DOOR(10642, 193, 8),
    BIRCH_DOOR(14759, 194, 8),
    JUNGLE_DOOR(28163, 195, 8),
    ACACIA_DOOR(23797, 196, 8),
    DARK_OAK_DOOR(10669, 197, 8),
    CRIMSON_DOOR(19544, -1, 16),
    WARPED_DOOR(15062, -1, 16),
    IRON_TRAPDOOR(17095, 167, 8),
    OAK_TRAPDOOR(16927, 96, 8),
    SPRUCE_TRAPDOOR(10289, -1, 13),
    BIRCH_TRAPDOOR(32585, -1, 13),
    JUNGLE_TRAPDOOR(8626, -1, 13),
    ACACIA_TRAPDOOR(18343, -1, 13),
    DARK_OAK_TRAPDOOR(10355, -1, 13),
    CRIMSON_TRAPDOOR(25056, -1, 16),
    WARPED_TRAPDOOR(7708, -1, 16),
    OAK_FENCE_GATE(16689, 107, 8),
    SPRUCE_FENCE_GATE(26423, 183, 8),
    BIRCH_FENCE_GATE(6322, 184, 8),
    JUNGLE_FENCE_GATE(21360, 185, 8),
    ACACIA_FENCE_GATE(14145, 187, 8),
    DARK_OAK_FENCE_GATE(10679, 186, 8),
    CRIMSON_FENCE_GATE(15602, -1, 16),
    WARPED_FENCE_GATE(11115, -1, 16),
    POWERED_RAIL(11064, 27, 8),
    DETECTOR_RAIL(13475, 28, 8),
    RAIL(13285, 66, 8),
    ACTIVATOR_RAIL(5834, 157, 8),
    SADDLE(30206, 329, 8),
    MINECART(14352, 328, 8),
    CHEST_MINECART(4497, 342, 8),
    FURNACE_MINECART(14196, 343, 8),
    TNT_MINECART(4277, 407, 8),
    HOPPER_MINECART(19024, 408, 8),
    CARROT_ON_A_STICK(27809, 398, 8),
    WARPED_FUNGUS_ON_A_STICK(11706, -1, 16),
    ELYTRA(23829, 443, 9),
    OAK_BOAT(17570, 333, 8),
    SPRUCE_BOAT(31427, 444, 9),
    BIRCH_BOAT(28104, 445, 9),
    JUNGLE_BOAT(4495, 446, 9),
    ACACIA_BOAT(27326, 447, 9),
    DARK_OAK_BOAT(28618, 448, 9),
    STRUCTURE_BLOCK(26831, 255, 9),
    JIGSAW(17398, -1, 14),
    TURTLE_HELMET(30120, -1, 13),
    SCUTE(11914, -1, 13),
    FLINT_AND_STEEL(28620, 259, 8),
    APPLE(7720, 260, 8),
    BOW(8745, 261, 8),
    ARROW(31091, 262, 8),
    COAL(29067, 263, 8),
    CHARCOAL(5390, 263, 8),
    DIAMOND(20865, 264, 8),
    EMERALD(5654, 388, 8),
    LAPIS_LAZULI(11075, 351, 8),
    QUARTZ(23608, 406, 8),
    AMETHYST_SHARD(7613, -1, 17),
    RAW_IRON(5329, -1, 17),
    IRON_INGOT(24895, 265, 8),
    RAW_COPPER(6162, -1, 17),
    COPPER_INGOT(12611, -1, 17),
    RAW_GOLD(19564, -1, 17),
    GOLD_INGOT(28927, 266, 8),
    NETHERITE_INGOT(32457, -1, 16),
    NETHERITE_SCRAP(29331, -1, 16),
    WOODEN_SWORD(7175, 268, 8),
    WOODEN_SHOVEL(28432, 269, 8),
    WOODEN_PICKAXE(12792, 270, 8),
    WOODEN_AXE(6292, 271, 8),
    WOODEN_HOE(16043, 290, 8),
    STONE_SWORD(25084, 272, 8),
    STONE_SHOVEL(9520, 273, 8),
    STONE_PICKAXE(14611, 274, 8),
    STONE_AXE(6338, 275, 8),
    STONE_HOE(22855, 291, 8),
    GOLDEN_SWORD(10505, 283, 8),
    GOLDEN_SHOVEL(15597, 284, 8),
    GOLDEN_PICKAXE(25898, 285, 8),
    GOLDEN_AXE(4878, 286, 8),
    GOLDEN_HOE(19337, 294, 8),
    IRON_SWORD(10904, 267, 8),
    IRON_SHOVEL(30045, 256, 8),
    IRON_PICKAXE(8842, 257, 8),
    IRON_AXE(15894, 258, 8),
    IRON_HOE(11339, 292, 8),
    DIAMOND_SWORD(27707, 276, 8),
    DIAMOND_SHOVEL(25415, 277, 8),
    DIAMOND_PICKAXE(24291, 278, 8),
    DIAMOND_AXE(27277, 279, 8),
    DIAMOND_HOE(24050, 293, 8),
    NETHERITE_SWORD(23871, -1, 16),
    NETHERITE_SHOVEL(29728, -1, 16),
    NETHERITE_PICKAXE(9930, -1, 16),
    NETHERITE_AXE(29533, -1, 16),
    NETHERITE_HOE(27385, -1, 16),
    STICK(9773, 280, 8),
    BOWL(32661, 281, 8),
    MUSHROOM_STEW(16336, 282, 8),
    STRING(12806, 287, 8),
    FEATHER(30548, 288, 8),
    GUNPOWDER(29974, 289, 8),
    WHEAT_SEEDS(28742, 295, 8),
    WHEAT(27709, 59, 8),
    BREAD(32049, 297, 8),
    LEATHER_HELMET(11624, 298, 8),
    LEATHER_CHESTPLATE(29275, 299, 8),
    LEATHER_LEGGINGS(28210, 300, 8),
    LEATHER_BOOTS(15282, 301, 8),
    CHAINMAIL_HELMET(26114, 302, 8),
    CHAINMAIL_CHESTPLATE(23602, 303, 8),
    CHAINMAIL_LEGGINGS(19087, 304, 8),
    CHAINMAIL_BOOTS(17953, 305, 8),
    IRON_HELMET(12025, 306, 8),
    IRON_CHESTPLATE(28112, 307, 8),
    IRON_LEGGINGS(18951, 308, 8),
    IRON_BOOTS(8531, 309, 8),
    DIAMOND_HELMET(10755, 310, 8),
    DIAMOND_CHESTPLATE(32099, 311, 8),
    DIAMOND_LEGGINGS(26500, 312, 8),
    DIAMOND_BOOTS(16522, 313, 8),
    GOLDEN_HELMET(7945, 314, 8),
    GOLDEN_CHESTPLATE(4507, 315, 8),
    GOLDEN_LEGGINGS(21002, 316, 8),
    GOLDEN_BOOTS(7859, 317, 8),
    NETHERITE_HELMET(15907, -1, 16),
    NETHERITE_CHESTPLATE(6106, -1, 16),
    NETHERITE_LEGGINGS(25605, -1, 16),
    NETHERITE_BOOTS(8923, -1, 16),
    FLINT(23596, 318, 8),
    PORKCHOP(30896, 319, 8),
    COOKED_PORKCHOP(27231, 320, 8),
    PAINTING(23945, 321, 8),
    GOLDEN_APPLE(27732, 322, 8),
    ENCHANTED_GOLDEN_APPLE(8280, 322, 8),
    OAK_SIGN(8192, 63, 8),
    SPRUCE_SIGN(21502, -1, 14),
    BIRCH_SIGN(11351, -1, 14),
    JUNGLE_SIGN(24717, -1, 14),
    ACACIA_SIGN(29808, -1, 14),
    DARK_OAK_SIGN(15127, -1, 14),
    CRIMSON_SIGN(12162, -1, 16),
    WARPED_SIGN(10407, -1, 16),
    BUCKET(15215, 325, 8),
    WATER_BUCKET(8802, 326, 8),
    LAVA_BUCKET(9228, 327, 8),
    POWDER_SNOW_BUCKET(31101, -1, 17),
    SNOWBALL(19487, 332, 8),
    LEATHER(16414, 334, 8),
    MILK_BUCKET(9680, 335, 8),
    PUFFERFISH_BUCKET(8861, -1, 13),
    SALMON_BUCKET(9606, -1, 13),
    COD_BUCKET(28601, -1, 13),
    TROPICAL_FISH_BUCKET(29995, -1, 13),
    AXOLOTL_BUCKET(20669, -1, 17),
    BRICK(6820, 336, 8),
    CLAY_BALL(24603, 337, 8),
    DRIED_KELP_BLOCK(12966, -1, 13),
    PAPER(9923, 339, 8),
    BOOK(23097, 340, 8),
    SLIME_BALL(5242, 341, 8),
    EGG(21603, 344, 8),
    COMPASS(24139, 345, 8),
    BUNDLE(16835, -1, 17),
    FISHING_ROD(4167, 346, 8),
    CLOCK(14980, 347, 8),
    SPYGLASS(27490, -1, 17),
    GLOWSTONE_DUST(6665, 348, 8),
    COD(24691, 349, 8),
    SALMON(18516, 349, 8),
    TROPICAL_FISH(24879, 349, 8),
    PUFFERFISH(8115, 349, 8),
    COOKED_COD(9681, 350, 8),
    COOKED_SALMON(5615, 350, 8),
    INK_SAC(7184, 351, 8),
    GLOW_INK_SAC(9686, -1, 17),
    COCOA_BEANS(30186, 351, 8),
    WHITE_DYE(10758, 351, 8),
    ORANGE_DYE(13866, 351, 8),
    MAGENTA_DYE(11788, 351, 8),
    LIGHT_BLUE_DYE(28738, 351, 8),
    YELLOW_DYE(5952, 351, 8),
    LIME_DYE(6147, 351, 8),
    PINK_DYE(31151, 351, 8),
    GRAY_DYE(9184, 351, 8),
    LIGHT_GRAY_DYE(27643, 351, 8),
    CYAN_DYE(8043, 351, 8),
    PURPLE_DYE(6347, 351, 8),
    BLUE_DYE(11588, -1, 14),
    BROWN_DYE(7648, -1, 14),
    GREEN_DYE(23215, 351, 8),
    RED_DYE(5728, 351, 8),
    BLACK_DYE(6202, -1, 14),
    BONE_MEAL(32458, 351, 8),
    BONE(5686, 352, 8),
    SUGAR(30638, 353, 8),
    CAKE(27048, 92, 8),
    WHITE_BED(8185, -1, 12),
    ORANGE_BED(11194, -1, 12),
    MAGENTA_BED(20061, -1, 12),
    LIGHT_BLUE_BED(20957, -1, 12),
    YELLOW_BED(30410, -1, 12),
    LIME_BED(27860, -1, 12),
    PINK_BED(13795, -1, 12),
    GRAY_BED(15745, -1, 12),
    LIGHT_GRAY_BED(5090, -1, 12),
    CYAN_BED(16746, -1, 12),
    PURPLE_BED(29755, -1, 12),
    BLUE_BED(12714, -1, 12),
    BROWN_BED(26672, -1, 12),
    GREEN_BED(13797, -1, 12),
    RED_BED(30910, 26, 8),
    BLACK_BED(20490, -1, 12),
    COOKIE(27431, 357, 8),
    FILLED_MAP(23504, 358, 8),
    SHEARS(27971, 359, 8),
    MELON_SLICE(5347, 360, 8),
    DRIED_KELP(21042, -1, 13),
    PUMPKIN_SEEDS(28985, 361, 8),
    MELON_SEEDS(18340, 362, 8),
    BEEF(4803, 363, 8),
    COOKED_BEEF(21595, 364, 8),
    CHICKEN(17281, 365, 8),
    COOKED_CHICKEN(16984, 366, 8),
    ROTTEN_FLESH(21591, 367, 8),
    ENDER_PEARL(5259, 368, 8),
    BLAZE_ROD(8289, 369, 8),
    GHAST_TEAR(18222, 370, 8),
    GOLD_NUGGET(28814, 371, 8),
    NETHER_WART(29227, 115, 8),
    POTION(24020, 373, 8),
    GLASS_BOTTLE(6116, 374, 8),
    SPIDER_EYE(9318, 375, 8),
    FERMENTED_SPIDER_EYE(19386, 376, 8),
    BLAZE_POWDER(18941, 377, 8),
    MAGMA_CREAM(25097, 378, 8),
    BREWING_STAND(14539, 117, 8),
    ENDER_EYE(24860, 381, 8),
    GLISTERING_MELON_SLICE(20158, 382, 8),
    AXOLOTL_SPAWN_EGG(30381, -1, 17),
    BAT_SPAWN_EGG(14607, 383, 8),
    BEE_SPAWN_EGG(22924, -1, 15),
    BLAZE_SPAWN_EGG(4759, 383, 8),
    CAT_SPAWN_EGG(29583, -1, 14),
    CAVE_SPIDER_SPAWN_EGG(23341, 383, 8),
    CHICKEN_SPAWN_EGG(5462, 383, 8),
    COD_SPAWN_EGG(27248, -1, 13),
    COW_SPAWN_EGG(14761, 383, 8),
    CREEPER_SPAWN_EGG(9653, 383, 8),
    DOLPHIN_SPAWN_EGG(20787, -1, 13),
    DONKEY_SPAWN_EGG(14513, 383, 8),
    DROWNED_SPAWN_EGG(19368, -1, 13),
    ELDER_GUARDIAN_SPAWN_EGG(11418, 383, 8),
    ENDERMAN_SPAWN_EGG(29488, 383, 8),
    ENDERMITE_SPAWN_EGG(16617, 383, 8),
    EVOKER_SPAWN_EGG(21271, 383, 8),
    FOX_SPAWN_EGG(22376, -1, 14),
    GHAST_SPAWN_EGG(9970, 383, 8),
    GLOW_SQUID_SPAWN_EGG(31578, -1, 17),
    GOAT_SPAWN_EGG(30639, -1, 17),
    GUARDIAN_SPAWN_EGG(20113, -1, 13),
    HOGLIN_SPAWN_EGG(14088, -1, 16),
    HORSE_SPAWN_EGG(25981, 383, 8),
    HUSK_SPAWN_EGG(20178, 383, 8),
    LLAMA_SPAWN_EGG(23640, 383, 11),
    MAGMA_CUBE_SPAWN_EGG(26638, 383, 8),
    MOOSHROOM_SPAWN_EGG(22125, 383, 8),
    MULE_SPAWN_EGG(11229, 383, 8),
    OCELOT_SPAWN_EGG(30080, 383, 8),
    PANDA_SPAWN_EGG(23759, -1, 14),
    PARROT_SPAWN_EGG(23614, 383, 12),
    PHANTOM_SPAWN_EGG(24648, -1, 13),
    PIG_SPAWN_EGG(22584, 383, 8),
    PIGLIN_SPAWN_EGG(16193, -1, 16),
    PIGLIN_BRUTE_SPAWN_EGG(30230, -1, 16),
    PILLAGER_SPAWN_EGG(28659, -1, 14),
    POLAR_BEAR_SPAWN_EGG(17015, -1, 10),
    PUFFERFISH_SPAWN_EGG(24570, -1, 13),
    RABBIT_SPAWN_EGG(26496, 383, 8),
    RAVAGER_SPAWN_EGG(8726, -1, 14),
    SALMON_SPAWN_EGG(18739, -1, 13),
    SHEEP_SPAWN_EGG(24488, 383, 8),
    SHULKER_SPAWN_EGG(31848, 383, 9),
    SILVERFISH_SPAWN_EGG(14537, 383, 8),
    SKELETON_SPAWN_EGG(15261, 383, 8),
    SKELETON_HORSE_SPAWN_EGG(21356, 383, 8),
    SLIME_SPAWN_EGG(17196, 383, 8),
    SPIDER_SPAWN_EGG(14984, 383, 8),
    SQUID_SPAWN_EGG(10682, 383, 8),
    STRAY_SPAWN_EGG(30153, 383, 8),
    STRIDER_SPAWN_EGG(6203, -1, 16),
    TRADER_LLAMA_SPAWN_EGG(8439, -1, 14),
    TROPICAL_FISH_SPAWN_EGG(19713, -1, 13),
    TURTLE_SPAWN_EGG(17324, -1, 13),
    VEX_SPAWN_EGG(27751, 383, 8),
    VILLAGER_SPAWN_EGG(30348, 383, 8),
    VINDICATOR_SPAWN_EGG(25324, 383, 8),
    WANDERING_TRADER_SPAWN_EGG(17904, -1, 14),
    WITCH_SPAWN_EGG(11837, 383, 8),
    WITHER_SKELETON_SPAWN_EGG(10073, 383, 8),
    WOLF_SPAWN_EGG(21692, 383, 8),
    ZOGLIN_SPAWN_EGG(7442, -1, 16),
    ZOMBIE_SPAWN_EGG(5814, 383, 8),
    ZOMBIE_HORSE_SPAWN_EGG(4275, 383, 8),
    ZOMBIE_VILLAGER_SPAWN_EGG(10311, 383, 8),
    ZOMBIFIED_PIGLIN_SPAWN_EGG(6626, 383, 8),
    EXPERIENCE_BOTTLE(12858, 384, 8),
    FIRE_CHARGE(4842, 385, 8),
    WRITABLE_BOOK(13393, 386, 8),
    WRITTEN_BOOK(24164, 387, 8),
    ITEM_FRAME(27318, 389, 8),
    GLOW_ITEM_FRAME(26473, -1, 17),
    FLOWER_POT(30567, 390, 8),
    CARROT(22824, 391, 8),
    POTATO(21088, 392, 8),
    BAKED_POTATO(14624, 393, 8),
    POISONOUS_POTATO(32640, 394, 8),
    MAP(21655, 395, 8),
    GOLDEN_CARROT(5300, 396, 8),
    SKELETON_SKULL(13270, 397, 8),
    WITHER_SKELETON_SKULL(31487, 397, 8),
    PLAYER_HEAD(21174, 397, 8),
    ZOMBIE_HEAD(9304, 397, 8),
    CREEPER_HEAD(29146, 397, 8),
    DRAGON_HEAD(20084, 397, 8),
    NETHER_STAR(12469, 399, 8),
    PUMPKIN_PIE(28725, 400, 8),
    FIREWORK_ROCKET(23841, 401, 8),
    FIREWORK_STAR(12190, 402, 8),
    ENCHANTED_BOOK(11741, 403, 8),
    NETHER_BRICK(19996, 405, 8),
    PRISMARINE_SHARD(10993, 409, 8),
    PRISMARINE_CRYSTALS(31546, 410, 8),
    RABBIT(23068, 411, 8),
    COOKED_RABBIT(4454, 412, 8),
    RABBIT_STEW(25318, 413, 8),
    RABBIT_FOOT(13864, 414, 8),
    RABBIT_HIDE(12467, 415, 8),
    ARMOR_STAND(12852, 416, 8),
    IRON_HORSE_ARMOR(30108, 417, 8),
    GOLDEN_HORSE_ARMOR(7996, 418, 8),
    DIAMOND_HORSE_ARMOR(10321, 419, 8),
    LEATHER_HORSE_ARMOR(30667, -1, 14),
    LEAD(29539, 420, 8),
    NAME_TAG(30731, 421, 8),
    COMMAND_BLOCK_MINECART(7992, 422, 8),
    MUTTON(4792, 423, 8),
    COOKED_MUTTON(31447, 424, 8),
    WHITE_BANNER(17562, 176, 8),
    ORANGE_BANNER(4839, 425, 8),
    MAGENTA_BANNER(15591, 425, 8),
    LIGHT_BLUE_BANNER(18060, 425, 8),
    YELLOW_BANNER(30382, 425, 8),
    LIME_BANNER(18887, 425, 8),
    PINK_BANNER(19439, 425, 8),
    GRAY_BANNER(12053, 425, 8),
    LIGHT_GRAY_BANNER(11417, 425, 8),
    CYAN_BANNER(9839, 425, 8),
    PURPLE_BANNER(29027, 425, 8),
    BLUE_BANNER(18481, 425, 8),
    BROWN_BANNER(11481, 425, 8),
    GREEN_BANNER(10698, 425, 8),
    RED_BANNER(26961, 425, 8),
    BLACK_BANNER(9365, 425, 8),
    END_CRYSTAL(19090, 426, 9),
    CHORUS_FRUIT(7652, 432, 9),
    POPPED_CHORUS_FRUIT(27844, 433, 9),
    BEETROOT(23305, 434, 9),
    BEETROOT_SEEDS(21282, 435, 9),
    BEETROOT_SOUP(16036, 436, 9),
    DRAGON_BREATH(20154, 437, 9),
    SPLASH_POTION(30248, 438, 9),
    SPECTRAL_ARROW(4568, 439, 9),
    TIPPED_ARROW(25164, 440, 9),
    LINGERING_POTION(25857, 441, 9),
    SHIELD(29943, 442, 9),
    TOTEM_OF_UNDYING(10139, 449, 11),
    SHULKER_SHELL(27848, 450, 11),
    IRON_NUGGET(13715, 452, 11),
    KNOWLEDGE_BOOK(12646, 453, 12),
    DEBUG_STICK(24562, -1, 13),
    MUSIC_DISC_13(16359, 2256, 8),
    MUSIC_DISC_CAT(16246, 2257, 8),
    MUSIC_DISC_BLOCKS(26667, 2258, 8),
    MUSIC_DISC_CHIRP(19436, 2259, 8),
    MUSIC_DISC_FAR(31742, 2260, 8),
    MUSIC_DISC_MALL(11517, 2261, 8),
    MUSIC_DISC_MELLOHI(26117, 2262, 8),
    MUSIC_DISC_STAL(14989, 2263, 8),
    MUSIC_DISC_STRAD(16785, 2264, 8),
    MUSIC_DISC_WARD(24026, 2265, 8),
    MUSIC_DISC_11(27426, 2266, 8),
    MUSIC_DISC_WAIT(26499, 2267, 8),
    MUSIC_DISC_OTHERSIDE(12974, -1, 18),
    MUSIC_DISC_PIGSTEP(21323, -1, 16),
    TRIDENT(7534, -1, 13),
    PHANTOM_MEMBRANE(18398, -1, 13),
    NAUTILUS_SHELL(19989, -1, 13),
    HEART_OF_THE_SEA(11807, -1, 13),
    CROSSBOW(4340, -1, 14),
    SUSPICIOUS_STEW(8173, -1, 14),
    LOOM(14276, -1, 14),
    FLOWER_BANNER_PATTERN(5762, -1, 14),
    CREEPER_BANNER_PATTERN(15774, -1, 14),
    SKULL_BANNER_PATTERN(7680, -1, 14),
    MOJANG_BANNER_PATTERN(11903, -1, 14),
    GLOBE_BANNER_PATTERN(27753, -1, 14),
    PIGLIN_BANNER_PATTERN(22028, -1, 16),
    COMPOSTER(31247, -1, 14),
    BARREL(22396, -1, 14),
    SMOKER(24781, -1, 14),
    BLAST_FURNACE(31157, -1, 14),
    CARTOGRAPHY_TABLE(28529, -1, 14),
    FLETCHING_TABLE(30838, -1, 14),
    GRINDSTONE(26260, -1, 14),
    SMITHING_TABLE(9082, -1, 14),
    STONECUTTER(25170, -1, 14),
    BELL(20000, -1, 14),
    LANTERN(5992, -1, 14),
    SOUL_LANTERN(27778, -1, 16),
    SWEET_BERRIES(19747, -1, 14),
    GLOW_BERRIES(11584, -1, 17),
    CAMPFIRE(8488, -1, 14),
    SOUL_CAMPFIRE(4238, -1, 16),
    SHROOMLIGHT(20424, -1, 16),
    HONEYCOMB(9482, -1, 15),
    BEE_NEST(8825, -1, 15),
    BEEHIVE(11830, -1, 15),
    HONEY_BOTTLE(22927, -1, 15),
    HONEYCOMB_BLOCK(28780, -1, 15),
    LODESTONE(23127, -1, 16),
    CRYING_OBSIDIAN(31545, -1, 16),
    BLACKSTONE(7354, -1, 16),
    BLACKSTONE_SLAB(11948, -1, 16),
    BLACKSTONE_STAIRS(14646, -1, 16),
    GILDED_BLACKSTONE(8498, -1, 16),
    POLISHED_BLACKSTONE(18144, -1, 16),
    POLISHED_BLACKSTONE_SLAB(23430, -1, 16),
    POLISHED_BLACKSTONE_STAIRS(8653, -1, 16),
    CHISELED_POLISHED_BLACKSTONE(21942, -1, 16),
    POLISHED_BLACKSTONE_BRICKS(19844, -1, 16),
    POLISHED_BLACKSTONE_BRICK_SLAB(12219, -1, 16),
    POLISHED_BLACKSTONE_BRICK_STAIRS(17983, -1, 16),
    CRACKED_POLISHED_BLACKSTONE_BRICKS(16846, -1, 16),
    RESPAWN_ANCHOR(4099, -1, 16),
    CANDLE(16122, -1, 17),
    WHITE_CANDLE(26410, -1, 17),
    ORANGE_CANDLE(22668, -1, 17),
    MAGENTA_CANDLE(25467, -1, 17),
    LIGHT_BLUE_CANDLE(28681, -1, 17),
    YELLOW_CANDLE(14351, -1, 17),
    LIME_CANDLE(21778, -1, 17),
    PINK_CANDLE(28259, -1, 17),
    GRAY_CANDLE(10721, -1, 17),
    LIGHT_GRAY_CANDLE(10031, -1, 17),
    CYAN_CANDLE(24765, -1, 17),
    PURPLE_CANDLE(19606, -1, 17),
    BLUE_CANDLE(29047, -1, 17),
    BROWN_CANDLE(26145, -1, 17),
    GREEN_CANDLE(29756, -1, 17),
    RED_CANDLE(4214, -1, 17),
    BLACK_CANDLE(12617, -1, 17),
    SMALL_AMETHYST_BUD(14958, -1, 17),
    MEDIUM_AMETHYST_BUD(8429, -1, 17),
    LARGE_AMETHYST_BUD(7279, -1, 17),
    AMETHYST_CLUSTER(13142, -1, 17),
    POINTED_DRIPSTONE(18755, -1, 17),
    WATER(24998, 8, 8),
    LAVA(8415, 10, 8),
    TALL_SEAGRASS(27189, -1, 13),
    PISTON_HEAD(30226, 34, 8),
    MOVING_PISTON(13831, 36, 8),
    WALL_TORCH(25890, 50, 8),
    FIRE(16396, 51, 8),
    SOUL_FIRE(30163, -1, 16),
    REDSTONE_WIRE(25984, 55, 8),
    OAK_WALL_SIGN(12984, 68, 8),
    SPRUCE_WALL_SIGN(7352, -1, 14),
    BIRCH_WALL_SIGN(9887, -1, 14),
    ACACIA_WALL_SIGN(20316, -1, 14),
    JUNGLE_WALL_SIGN(29629, -1, 14),
    DARK_OAK_WALL_SIGN(9508, -1, 14),
    REDSTONE_WALL_TORCH(7595, 76, 8),
    SOUL_WALL_TORCH(27500, -1, 16),
    NETHER_PORTAL(19469, 90, 8),
    ATTACHED_PUMPKIN_STEM(12724, -1, 13),
    ATTACHED_MELON_STEM(30882, -1, 13),
    PUMPKIN_STEM(19021, 104, 8),
    MELON_STEM(8247, 105, 8),
    WATER_CAULDRON(32008, -1, 17),
    CAULDRON(26531,380,8),
    LAVA_CAULDRON(4514, -1, 17),
    POWDER_SNOW_CAULDRON(31571, -1, 17),
    END_PORTAL(16782, 119, 8),
    COCOA(29709, 127, 8),
    TRIPWIRE(8810, 132, 8),
    POTTED_OAK_SAPLING(11905, -1, 13),
    POTTED_SPRUCE_SAPLING(29498, -1, 13),
    POTTED_BIRCH_SAPLING(32484, -1, 13),
    POTTED_JUNGLE_SAPLING(7525, -1, 13),
    POTTED_ACACIA_SAPLING(14096, -1, 13),
    POTTED_DARK_OAK_SAPLING(6486, -1, 13),
    POTTED_FERN(23315, -1, 13),
    POTTED_DANDELION(9727, -1, 13),
    POTTED_POPPY(7457, -1, 13),
    POTTED_BLUE_ORCHID(6599, -1, 13),
    POTTED_ALLIUM(13184, -1, 13),
    POTTED_AZURE_BLUET(8754, -1, 13),
    POTTED_RED_TULIP(28594, -1, 13),
    POTTED_ORANGE_TULIP(28807, -1, 13),
    POTTED_WHITE_TULIP(24330, -1, 13),
    POTTED_PINK_TULIP(10089, -1, 13),
    POTTED_OXEYE_DAISY(19707, -1, 13),
    POTTED_CORNFLOWER(28917, -1, 14),
    POTTED_LILY_OF_THE_VALLEY(9364, -1, 14),
    POTTED_WITHER_ROSE(26876, -1, 14),
    POTTED_RED_MUSHROOM(22881, -1, 13),
    POTTED_BROWN_MUSHROOM(14481, -1, 13),
    POTTED_DEAD_BUSH(13020, -1, 13),
    POTTED_CACTUS(8777, 140, 8),
    CARROTS(17258, 141, 8),
    POTATOES(10879, 142, 8),
    SKELETON_WALL_SKULL(31650, -1, 13),
    WITHER_SKELETON_WALL_SKULL(9326, -1, 13),
    ZOMBIE_WALL_HEAD(16296, -1, 13),
    PLAYER_WALL_HEAD(13164, -1, 13),
    CREEPER_WALL_HEAD(30123, -1, 13),
    DRAGON_WALL_HEAD(19818, -1, 13),
    WHITE_WALL_BANNER(15967, 177, 8),
    ORANGE_WALL_BANNER(9936, -1, 13),
    MAGENTA_WALL_BANNER(23291, -1, 13),
    LIGHT_BLUE_WALL_BANNER(12011, -1, 13),
    YELLOW_WALL_BANNER(32004, -1, 13),
    LIME_WALL_BANNER(21422, -1, 13),
    PINK_WALL_BANNER(9421, -1, 13),
    GRAY_WALL_BANNER(24275, -1, 13),
    LIGHT_GRAY_WALL_BANNER(31088, -1, 13),
    CYAN_WALL_BANNER(10889, -1, 13),
    PURPLE_WALL_BANNER(14298, -1, 13),
    BLUE_WALL_BANNER(17757, -1, 13),
    BROWN_WALL_BANNER(14731, -1, 13),
    GREEN_WALL_BANNER(15046, -1, 13),
    RED_WALL_BANNER(4378, -1, 13),
    BLACK_WALL_BANNER(4919, -1, 13),
    BEETROOTS(22075, 207, 9),
    END_GATEWAY(26605, 209, 9),
    FROSTED_ICE(21814, 212, 9),
    KELP_PLANT(29697, -1, 13),
    DEAD_TUBE_CORAL_WALL_FAN(5128, -1, 13),
    DEAD_BRAIN_CORAL_WALL_FAN(23718, -1, 13),
    DEAD_BUBBLE_CORAL_WALL_FAN(18453, -1, 13),
    DEAD_FIRE_CORAL_WALL_FAN(23375, -1, 13),
    DEAD_HORN_CORAL_WALL_FAN(27550, -1, 13),
    TUBE_CORAL_WALL_FAN(25282, -1, 13),
    BRAIN_CORAL_WALL_FAN(22685, -1, 13),
    BUBBLE_CORAL_WALL_FAN(20382, -1, 13),
    FIRE_CORAL_WALL_FAN(20100, -1, 13),
    HORN_CORAL_WALL_FAN(28883, -1, 13),
    BAMBOO_SAPLING(8478, -1, 14),
    POTTED_BAMBOO(22542, -1, 14),
    VOID_AIR(13668, -1, 13),
    CAVE_AIR(17422, -1, 13),
    BUBBLE_COLUMN(31612, -1, 13),
    SWEET_BERRY_BUSH(11958, -1, 14),
    WEEPING_VINES_PLANT(19437, -1, 16),
    TWISTING_VINES_PLANT(25338, -1, 16),
    CRIMSON_WALL_SIGN(19242, -1, 16),
    WARPED_WALL_SIGN(13534, -1, 16),
    POTTED_CRIMSON_FUNGUS(5548, -1, 16),
    POTTED_WARPED_FUNGUS(30800, -1, 16),
    POTTED_CRIMSON_ROOTS(13852, -1, 16),
    POTTED_WARPED_ROOTS(6403, -1, 16),
    CANDLE_CAKE(25423, -1, 17),
    WHITE_CANDLE_CAKE(12674, -1, 17),
    ORANGE_CANDLE_CAKE(24982, -1, 17),
    MAGENTA_CANDLE_CAKE(11022, -1, 17),
    LIGHT_BLUE_CANDLE_CAKE(7787, -1, 17),
    YELLOW_CANDLE_CAKE(17157, -1, 17),
    LIME_CANDLE_CAKE(14309, -1, 17),
    PINK_CANDLE_CAKE(20405, -1, 17),
    GRAY_CANDLE_CAKE(6777, -1, 17),
    LIGHT_GRAY_CANDLE_CAKE(11318, -1, 17),
    CYAN_CANDLE_CAKE(21202, -1, 17),
    PURPLE_CANDLE_CAKE(22663, -1, 17),
    BLUE_CANDLE_CAKE(26425, -1, 17),
    BROWN_CANDLE_CAKE(26024, -1, 17),
    GREEN_CANDLE_CAKE(16334, -1, 17),
    RED_CANDLE_CAKE(24151, -1, 17),
    BLACK_CANDLE_CAKE(15191, -1, 17),
    POWDER_SNOW(24077, -1, 17),
    CAVE_VINES(7339, -1, 17),
    CAVE_VINES_PLANT(30645, -1, 17),
    BIG_DRIPLEAF_STEM(13167, -1, 17),
    POTTED_AZALEA_BUSH(20430, -1, 17),
    POTTED_FLOWERING_AZALEA_BUSH(10609, -1, 17),
    /* ------------------- 1.19 Seperator ---------------------------- */
    GOAT_HORN(28237, -1, 19),
    MANGROVE_PRESSURE_PLATE(9748, -1, 19),
    FROGSPAWN(8350, -1, 19),
    MANGROVE_FENCE_GATE(28476, -1, 19),
    MUD_BRICKS(29168, -1, 19),
    SCULK_CATALYST(12017, -1, 19),
    BIRCH_CHEST_BOAT(18546, -1, 19),
    MANGROVE_PROPAGULE(18688, -1, 19),
    MANGROVE_LOG(23890, -1, 19),
    MUDDY_MANGROVE_ROOTS(23244, -1, 19),
    TADPOLE_BUCKET(9731, -1, 19),
    POTTED_MANGROVE_PROPAGULE(22003, -1, 19),
    MANGROVE_PLANKS(7078, -1, 19),
    MANGROVE_FENCE(15021, -1, 19),
    SCULK_VEIN(11615, -1, 19),
    ECHO_SHARD(12529, -1, 19),
    MANGROVE_LEAVES(15310, -1, 19),
    OAK_CHEST_BOAT(7765, -1, 19),
    SCULK(17870, -1, 19),
    MANGROVE_STAIRS(27641, -1, 19),
    MANGROVE_DOOR(18964, -1, 19),
    JUNGLE_CHEST_BOAT(20133, -1, 19),
    REINFORCED_DEEPSLATE(10949, -1, 19),
    TADPOLE_SPAWN_EGG(32467, -1, 19),
    MANGROVE_WALL_SIGN(27203, -1, 19),
    MUD_BRICK_WALL(18292, -1, 19),
    STRIPPED_MANGROVE_LOG(15197, -1, 19),
    FROG_SPAWN_EGG(26682, -1, 19),
    MUD(32418, -1, 19),
    SPRUCE_CHEST_BOAT(30841, -1, 19),
    PEARLESCENT_FROGLIGHT(21441, -1, 19),
    MUSIC_DISC_5(9212, -1, 19),
    MUD_BRICK_SLAB(10611, -1, 19),
    RECOVERY_COMPASS(12710, -1, 19),
    VERDANT_FROGLIGHT(22793, -1, 19),
    PACKED_MUD(7472, -1, 19),
    ACACIA_CHEST_BOAT(28455, -1, 19),
    WARDEN_SPAWN_EGG(27553, -1, 19),
    MANGROVE_TRAPDOOR(17066, -1, 19),
    MUD_BRICK_STAIRS(13620, -1, 19),
    MANGROVE_BOAT(20792, -1, 19),
    MANGROVE_CHEST_BOAT(18572, -1, 19),
    MANGROVE_SLAB(13704, -1, 19),
    MANGROVE_SIGN(21975, -1, 19),
    STRIPPED_MANGROVE_WOOD(4828, -1, 19),
    DARK_OAK_CHEST_BOAT(8733, -1, 19),
    MANGROVE_BUTTON(17207, -1, 19),
    SCULK_SHRIEKER(20985, -1, 19),
    MANGROVE_WOOD(25484, -1, 19),
    MANGROVE_ROOTS(22124, -1, 19),
    ALLAY_SPAWN_EGG(7909, -1, 19),
    DISC_FRAGMENT_5(29729, -1, 19),
    OCHRE_FROGLIGHT(25330, -1, 19),
    /* ------------------- 1.8 Block Seperator ----------------------- */
    CAULDRON_BLOCK(118,118,8,12),
    STATIONARY_LAVA_BLOCK(11,11,8,12),
    STATIONARY_WATER_BLOCK(9,9,8,12),
    DEAD_BUSH_BLOCK(32,32,8,12),
    REDSTONE_COMPARATOR_OFF_BLOCK(149,149,8,12),
    REDSTONE_COMPARATOR_ON_BLOCK(150,150,8,12),
    WOOD_DOUBLE_STEP_BLOCK(125,125,8,12),
    REDSTONE_REPEATER_OFF_BLOCK(93,93,8,12),
    REDSTONE_REPEATER_ON_BLOCK(94,94,8,12),
    WHEAT_BLOCK(59,59,8,12),
    OAK_DOOR_BLOCK(64,64,8,12),
    SPRUCE_DOOR_BLOCK(193,193,8,12),
    BIRCH_DOOR_BLOCK(194,194,8,12),
    JUNGLE_DOOR_BLOCK(195,195,8,12),
    ACACIA_DOOR_BLOCK(196,196,8,12),
    DARK_OAK_DOOR_BLOCK(197,197,8,12),
    SKULL_BLOCK(144,144,8,12),
    SUGAR_CANE_BLOCK(83,83,8,12),
    GLOWING_REDSTONE_ORE_BLOCK(74,74,8,12),
    SIGN_BLOCK(63,63,8,12),
    REDSTONE_TORCH_OFF_BLOCK(75,75,8,12),
    BREWING_STAND_BLOCK(117,117,8,12),
    BURNING_FURNACE_BLOCK(62,62,8,12),
    REDSTONE_LAMP_ON_BLOCK(124,124,8,12),
    BED_BLOCK(26,27,8,12),
    IRON_DOOR_BLOCK(71,71,8,12),
    DAYLIGHT_DETECTOR_INVERTED_BLOCK(178,178,8,12),
    CAKE_BLOCK(92,92,8,12),
    BANNER_BLOCK(176,176,8,12),
    PURPUR_DOUBLE_SLAB_BLOCK(204,204,9,12),
    NETHER_STALK_BLOCK(115,115,8,12),
    /* ------------------- 1.20 Seperator ---------------------------- */
    CHERRY_PLANKS(8354, -1, 20),
    BAMBOO_PLANKS(8520, -1, 20),
    BAMBOO_MOSAIC(10715, -1, 20),
    CHERRY_SAPLING(25204, -1, 20),
    SUSPICIOUS_SAND(18410, -1, 20),
    SUSPICIOUS_GRAVEL(7353, -1, 20),
    CHERRY_LOG(20847, -1, 20),
    BAMBOO_BLOCK(20770, -1, 20),
    STRIPPED_CHERRY_LOG(18061, -1, 20),
    STRIPPED_CHERRY_WOOD(19647, -1, 20),
    STRIPPED_BAMBOO_BLOCK(14799, -1, 20),
    CHERRY_WOOD(9826, -1, 20),
    CHERRY_LEAVES(20856, -1, 20),
    TORCHFLOWER(4501, -1, 20),
    PINK_PETALS(10420, -1, 20),
    CHERRY_SLAB(16673, -1, 20),
    BAMBOO_SLAB(17798, -1, 20),
    BAMBOO_MOSAIC_SLAB(22118, -1, 20),
    CHISELED_BOOKSHELF(8099, -1, 20),
    DECORATED_POT(8720, -1, 20),
    CHERRY_FENCE(32047, -1, 20),
    BAMBOO_FENCE(17207, -1, 20),
    CHERRY_STAIRS(18380, -1, 20),
    BAMBOO_STAIRS(25674, -1, 20),
    BAMBOO_MOSAIC_STAIRS(20977, -1, 20),
    SNIFFER_EGG(12980, -1, 20),
    CALIBRATED_SCULK_SENSOR(21034, -1, 20),
    CHERRY_BUTTON(9058, -1, 20),
    BAMBOO_BUTTON(21810, -1, 20),
    CHERRY_PRESSURE_PLATE(8651, -1, 20),
    BAMBOO_PRESSURE_PLATE(26740, -1, 20),
    CHERRY_DOOR(12684, -1, 20),
    BAMBOO_DOOR(19971, -1, 20),
    CHERRY_TRAPDOOR(6293, -1, 20),
    BAMBOO_TRAPDOOR(9174, -1, 20),
    CHERRY_FENCE_GATE(28222, -1, 20),
    BAMBOO_FENCE_GATE(14290, -1, 20),
    CHERRY_BOAT(13628, -1, 20),
    CHERRY_CHEST_BOAT(7165, -1, 20),
    BAMBOO_RAFT(25901, -1, 20),
    BAMBOO_CHEST_RAFT(20056, -1, 20),
    CHERRY_SIGN(16520, -1, 20),
    BAMBOO_SIGN(26139, -1, 20),
    OAK_HANGING_SIGN(20116, -1, 20),
    SPRUCE_HANGING_SIGN(24371, -1, 20),
    BIRCH_HANGING_SIGN(17938, -1, 20),
    JUNGLE_HANGING_SIGN(27671, -1, 20),
    ACACIA_HANGING_SIGN(30257, -1, 20),
    CHERRY_HANGING_SIGN(5088, -1, 20),
    DARK_OAK_HANGING_SIGN(23360, -1, 20),
    MANGROVE_HANGING_SIGN(25106, -1, 20),
    BAMBOO_HANGING_SIGN(4726, -1, 20),
    CRIMSON_HANGING_SIGN(20696, -1, 20),
    WARPED_HANGING_SIGN(8195, -1, 20),
    CAMEL_SPAWN_EGG(14760, -1, 20),
    ENDER_DRAGON_SPAWN_EGG(28092, -1, 20),
    IRON_GOLEM_SPAWN_EGG(12781, -1, 20),
    SNIFFER_SPAWN_EGG(27473, -1, 20),
    SNOW_GOLEM_SPAWN_EGG(24732, -1, 20),
    WITHER_SPAWN_EGG(8024, -1, 20),
    PIGLIN_HEAD(5512, -1, 20),
    TORCHFLOWER_SEEDS(18153, -1, 20),
    PITCHER_POD(7977, -1, 20),
    MUSIC_DISC_RELIC(8200, -1, 20),
    BRUSH(30569, -1, 20),
    NETHERITE_UPGRADE_SMITHING_TEMPLATE(7615, -1, 20),
    SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE(16124, -1, 20),
    DUNE_ARMOR_TRIM_SMITHING_TEMPLATE(30925, -1, 20),
    COAST_ARMOR_TRIM_SMITHING_TEMPLATE(25501, -1, 20),
    WILD_ARMOR_TRIM_SMITHING_TEMPLATE(5870, -1, 20),
    WARD_ARMOR_TRIM_SMITHING_TEMPLATE(24534, -1, 20),
    EYE_ARMOR_TRIM_SMITHING_TEMPLATE(14663, -1, 20),
    VEX_ARMOR_TRIM_SMITHING_TEMPLATE(25818, -1, 20),
    TIDE_ARMOR_TRIM_SMITHING_TEMPLATE(20420, -1, 20),
    SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE(14386, -1, 20),
    RIB_ARMOR_TRIM_SMITHING_TEMPLATE(6010, -1, 20),
    SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE(29143, -1, 20),
    WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE(4957, -1, 20),
    SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE(20537, -1, 20),
    SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE(7070, -1, 20),
    RAISER_ARMOR_TRIM_SMITHING_TEMPLATE(29116, -1, 20),
    HOST_ARMOR_TRIM_SMITHING_TEMPLATE(12165, -1, 20),
    ANGLER_POTTERY_SHERD(9952, -1, 20),
    ARCHER_POTTERY_SHERD(21629, -1, 20),
    ARMS_UP_POTTERY_SHERD(5484, -1, 20),
    BLADE_POTTERY_SHERD(25079, -1, 20),
    BREWER_POTTERY_SHERD(23429, -1, 20),
    BURN_POTTERY_SHERD(21259, -1, 20),
    DANGER_POTTERY_SHERD(30506, -1, 20),
    EXPLORER_POTTERY_SHERD(5124, -1, 20),
    FRIEND_POTTERY_SHERD(18221, -1, 20),
    HEART_POTTERY_SHERD(17607, -1, 20),
    HEARTBREAK_POTTERY_SHERD(21108, -1, 20),
    HOWL_POTTERY_SHERD(24900, -1, 20),
    MINER_POTTERY_SHERD(30602, -1, 20),
    MOURNER_POTTERY_SHERD(23993, -1, 20),
    PLENTY_POTTERY_SHERD(28236, -1, 20),
    PRIZE_POTTERY_SHERD(4341, -1, 20),
    SHEAF_POTTERY_SHERD(23652, -1, 20),
    SHELTER_POTTERY_SHERD(28390, -1, 20),
    SKULL_POTTERY_SHERD(16980, -1, 20),
    SNORT_POTTERY_SHERD(15921, -1, 20),
    CHERRY_WALL_SIGN(20188, -1, 20),
    BAMBOO_WALL_SIGN(18857, -1, 20),
    OAK_WALL_HANGING_SIGN(15637, -1, 20),
    SPRUCE_WALL_HANGING_SIGN(18833, -1, 20),
    BIRCH_WALL_HANGING_SIGN(15937, -1, 20),
    ACACIA_WALL_HANGING_SIGN(22477, -1, 20),
    CHERRY_WALL_HANGING_SIGN(10953, -1, 20),
    JUNGLE_WALL_HANGING_SIGN(16691, -1, 20),
    DARK_OAK_WALL_HANGING_SIGN(14296, -1, 20),
    MANGROVE_WALL_HANGING_SIGN(16974, -1, 20),
    CRIMSON_WALL_HANGING_SIGN(28982, -1, 20),
    WARPED_WALL_HANGING_SIGN(20605, -1, 20),
    BAMBOO_WALL_HANGING_SIGN(6669, -1, 20),
    POTTED_TORCHFLOWER(21278, -1, 20),
    POTTED_CHERRY_SAPLING(30785, -1, 20),
    PIGLIN_WALL_HEAD(4446, -1, 20),
    TORCHFLOWER_CROP(28460, -1, 20),
    PITCHER_CROP(15420, -1, 20),

    ;

    private final int id;
    @NotNull private final MinecraftVersion introduced;
    @Nullable private final MinecraftVersion deprecated;
    private final int legacyID;

    @Nullable private EMaterialData[] data;

    private Material matched;
    private short durability;

    private boolean durabilityDependent = false;
    private final Set<EMaterial> duplicates = new HashSet<>();

    public boolean noNBT = true;

    EMaterial(int id, int legacyId, int release) {
        this(id,legacyId,release,NOT_FOUND);
    }

    EMaterial(int id, int legacyID,int release, int deprecation) {
        this.id = id;
        this.legacyID = legacyID;
        this.introduced = new MinecraftVersion(release,0);
        if(deprecation==NOT_FOUND) {
            deprecated = null;
        } else {
            deprecated = new MinecraftVersion(deprecation,0);
        }
    }

    @Nullable
    public Material getBukkitMaterial() {
        if(!isInitialised)
            handleNonInitialised();
        return matched;
    }

    private static void handleNonInitialised() {
        throw new IllegalStateException("Material Enum has not been initialised. This could be because this is not a Bukkit Server or because something went wrong!");
    }

    public short getItemData() {
        if(!isInitialised)
            handleNonInitialised();

        return durability;
    }

    public Set<EMaterial> getDuplicates() {
        return Collections.unmodifiableSet(duplicates);
    }

    public boolean isCompatible() {
        if(!isInitialised)
            handleNonInitialised();

        return matched!=null;
    }

    @NotNull
    public MinecraftVersion getRelease() {
        return this.introduced;
    }

    @Nullable
    public MinecraftVersion getDeprecation() {
        return this.deprecated;
    }

    public boolean isCompatible(MinecraftVersion version) {
        if(deprecated!=null) {
            //greater than deprecation date.
            if(version.getMajor()>deprecated.getMajor())
                return false;
        }

        return version.compareTo(introduced)>=0;
    }

    public int getLegacyID() {
        return legacyID;
    }

    public boolean wasLegacy() {
        return legacyID!=NOT_FOUND;
    }

    public int getId() {
        return id;
    }

    public boolean noNBT() {
        return noNBT;
    }

    public boolean isDurabilityDependent() {
        return durabilityDependent;
    }

    //* -------- Static Separator ----------- *//

    private volatile static boolean isInitialised = false;
    private volatile static MinecraftVersion version;
    //can be accessed concurrently as although the state is shared, it is effectively immutable
    private static Map<String,EMaterial> byName;
    private static Map<String,EMaterial> byNameThisVersion;
    private static Map<Integer,EMaterial> byId;
    private static Map<Integer, Collection<EMaterial>> versionMap;

    private static final int NOT_FOUND = -1;

    public static synchronized boolean isInitialised() {
        return isInitialised;
    }

    public static void initialise(@NotNull MinecraftVersion version, @NotNull InputStream stream) {
        if(isInitialised) {
            return;
        }
        synchronized (EMaterial.class) {
            if(isInitialised)
                return;

            EMaterial.version = version;
            doInitialise(version,stream);
            isInitialised = true;
            mapThisVersion();
        }
    }

    @NotNull
    public static Collection<EMaterial> values(@NotNull MinecraftVersion version) {
        if(!isInitialised)
            handleNonInitialised();

        int major = version.getMajor();
        Collection<EMaterial> materials = versionMap.get(major);
        if(materials!=null)
            return materials;

        int closestMajor = getClosestMajor(major);
        if(closestMajor==NOT_FOUND)
            throw new UnsupportedVersionException("Cannot get materials from that version as it is lower than lowest material enum version");

        return versionMap.get(closestMajor);
    }


    @NotNull
    public static Collection<EMaterial> valuesThisVersion() {
        return values(version);
    }

    @NotNull
    public static Collection<EMaterial> byLegacyID(int id) {
        if(id<0)
            throw new IllegalArgumentException("Legacy id must be greater than 0");
        Set<EMaterial> materials = new HashSet<>();
        for(EMaterial material : values()) {
            if(material.getLegacyID()==id)
                materials.add(material);
        }
        return Collections.unmodifiableSet(materials);
    }

    @Nullable
    public static EMaterial matchMaterial(@NotNull String name) {
        if(!isInitialised)
            handleNonInitialised();

        return byNameThisVersion.get(name.toUpperCase(Locale.ROOT));
    }

    @Nullable
    public static EMaterial matchMaterialAnyVersion(@NotNull String name) {
        if(!isInitialised)
            handleNonInitialised();

        return byName.get(name.toUpperCase(Locale.ROOT));
    }

    @Nullable
    public static EMaterial matchMaterial(@Nullable Material material, short durability) {
        if(!isInitialised())
            handleNonInitialised();

        if(material==null)
            return EMaterial.AIR;

        Objects.requireNonNull(material);
        for(EMaterial mat : values()) {
            if(Objects.equals(mat.matched,material)) {
                if(!mat.durabilityDependent)
                    return mat;

                if(mat.durability == durability)
                    return mat;
            }
        }
        return null;
    }

    @Nullable
    public static EMaterial matchMaterial(@NotNull ItemStack itemStack) {
        return matchMaterial(itemStack.getType(),itemStack.getDurability());
    }

    @Nullable
    public static EMaterial matchMaterial(int id) {
        return byId.get(id);
    }

    @NotNull
    public static Collection<EMaterial> matchAnyName(@NotNull String name) {
        name = name.toUpperCase(Locale.ROOT);
        EMaterial match = byName.get(name);
        if(match!=null)
            return ImmutableList.of(match);

        Set<EMaterial> materials = new HashSet<>();
        for(EMaterial material : values()) {
            Objects.requireNonNull(material.data,"Material does not have any data '"+material+"'");
            for(EMaterialData data : material.data) {
                if(data.name.equals(name)) {
                    materials.add(material);
                }
            }
        }
        return Collections.unmodifiableSet(materials);
    }

    @NotNull
    public static Collection<EMaterial> matchByBukkitMaterial(@NotNull Material material) {
        Set<EMaterial> matches = new HashSet<>();
        for(EMaterial mat : values()) {
            if (Objects.equals(mat.matched,material)) {
                matches.add(mat);
            }
        }
        return Collections.unmodifiableSet(matches);
    }

    private static int getClosestMajor(int major) {
        int closestVersion = NOT_FOUND;
        for(int version : versionMap.keySet()) {
            if(version>=major) {
                if(version>closestVersion) {
                    closestVersion = version;
                }
            }
        }
        return closestVersion;
    }


    private static void doInitialise(MinecraftVersion version, @NotNull InputStream stream) {
        Server server = Bukkit.getServer();
        if (server != null) {
            server.getLogger().info("Initialising EMaterials");
        }

        mapNames();
        mapIds();
        getData(stream);
        matchMaterials(version);
        versionMap();
        findDuraDependent();
        findDuplicates();
    }

    private static void mapThisVersion() {
        byNameThisVersion = new HashMap<>();
        for(EMaterial material : valuesThisVersion()) {
            byNameThisVersion.put(material.name(),material);
        }
    }

    private static void findDuplicates() {
        for(EMaterial materialA : EMaterial.values()) {
            if(materialA.matched==null)
                continue;

            for(EMaterial materialB : EMaterial.values()) {
                if(materialB.matched==null)
                    continue;

                if(materialA.equals(materialB))
                    continue;

                if(materialA.matched.equals(materialB.matched) &&
                    materialA.durability == materialB.durability) {
                    materialA.duplicates.add(materialB);
                    materialB.duplicates.add(materialA);
                }
            }
        }
    }


    private static void findDuraDependent() {
        getDuraDependentByDuplicates();
        getDuraDependentBySpawnEggs();
    }

    private static void getDuraDependentBySpawnEggs() {
        if(version.getMajor()>=13) {
            for(EMaterial material : values()) {
                if(material.matched!=null) {
                    ItemStack itemStack = new ItemStack(material.matched);
                    if (itemStack.getItemMeta() instanceof SpawnEggMeta)
                        material.durabilityDependent = true;
                }
            }
        }
    }

    private static void getDuraDependentByDuplicates() {
        for(Material material : Material.values()) {
            Collection<EMaterial> matches = matchByBukkitMaterial(material);
            if(matches.size()>1) {
                for(EMaterial mat : matches) {
                    mat.durabilityDependent = true;
                }
            }
        }
    }

    private static void getData(@NotNull InputStream stream) {
        Properties materialData = new Properties();
        try {
            materialData.load(stream);
        } catch (IOException e) {
            throw new RuntimeException("Could not load material properties from stream",e);
        }

        for(String name : materialData.stringPropertyNames()) {
            EMaterial material = byName.get(name);
            if(material==null) {
                throw new IllegalStateException("Could not find material with id '"+name+"'. There is data present for this id");
            }
            material.data = getRawData(name,materialData.getProperty(name));
        }

        for(EMaterial material : values()) {
            if(material.data==null)
                throw new IllegalStateException("No material data found for '"+material.name()+"' id '"+material.id+"'");
        }

        try {
            stream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private final static Pattern SPACE = Pattern.compile(" ");

    private static EMaterialData[] getRawData(String materialName, String property) {
        String[] split = SPACE.split(property);
        Preconditions.checkState(split.length>0 && split.length%3==0,"Material data for '"+materialName+"' is badly formatted");
        List<EMaterialData> dataList = new ArrayList<>();
        for(int i=0;i<split.length;i+=3) {
            String name = split[i];
            String durability = split[i+1];
            String version = split[i+2];

            int durabilityInt;
            int versionInt;
            try {
                durabilityInt = Integer.parseInt(durability);
            } catch (NumberFormatException e) {
                throw new IllegalStateException("Material data for '"+materialName+"' is badly formatted. Durability is not an integer '"+durability+"'");
            }
            try {
                versionInt = Integer.parseInt(version);
            } catch (NumberFormatException e) {
                throw new IllegalStateException("Material data for '"+materialName+"' is badly formatted. Version is not an integer '"+durability+"'");
            }

            dataList.add(new EMaterialData(name,durabilityInt,versionInt));
        }
        Preconditions.checkState(dataList.size()>0);
        return dataList.toArray(new EMaterialData[0]);
    }

    private static void mapIds() {
        byId = new HashMap<>();
        for(EMaterial material : values()) {
            if(byId.containsKey(material.id))
                throw new IllegalStateException("Duplicate Material Id '"+material.id+"'");
            byId.put(material.id,material);
        }
    }

    private static void versionMap() {
        versionMap = new HashMap<>();
        Set<Integer> versions = getVersionSet();

        for(Integer version : versions) {
            versionMap.put(version,getMaterialsFromVersion(version));
        }
    }

    @NotNull
    private static Set<EMaterial> getMaterialsFromVersion(int version) {
        Set<EMaterial> materials = new HashSet<>();
        MinecraftVersion v = new MinecraftVersion(version,0);
        for(EMaterial material : values()) {
            if(material.isCompatible(v)) {
                materials.add(material);
            }
        }
        return Collections.unmodifiableSet(materials);
    }

    @NotNull
    private static Set<Integer> getVersionSet() {
        Set<Integer> versions = new HashSet<>();
        for(EMaterial material : values()) {
            int version = material.introduced.getMajor();
            if(version!=NOT_FOUND) {
                versions.add(version);
            }
        }
        return versions;
    }

    private static void mapNames() {
        byName = new HashMap<>();
        for(EMaterial material : values()) {
            byName.put(material.name(),material);
        }
    }

    private static void matchMaterials(@NotNull MinecraftVersion version) {
        for(EMaterial material : EMaterial.values()) {
            if(material.isCompatible(version)) {
                EMaterialData correct = findData(material,version);
                if(correct!=null) {
                    material.matched = Material.matchMaterial(correct.getName());
                    if(material.matched==null)
                        throw new IllegalStateException("Could not initialise EMaterial Enum as although the EMaterial contains data for version '"+version+"' it is not correct! Data '"+correct+"'");
                    material.durability = correct.getDurability();
                } else {
                    throw new IllegalStateException("Could not initialise EMaterial Enum as for material '"+material+"' the release version is '"+material.introduced+"' however it does not contain any EMaterial Data for that version! Current Version '"+version+"'");
                }
            }
        }
    }

    @Nullable
    private static EMaterialData findData(@NotNull EMaterial material, @NotNull MinecraftVersion version) {
        EMaterialData correct = null;
        for(EMaterialData data : material.data) {
            if(version.getMajor()>=data.getLowestVersion()) {
                if(correct==null) {
                    correct=data;
                } else {
                    if(data.getLowestVersion()>correct.getLowestVersion()) {
                        correct=data;
                    }
                }
            }
        }
        return correct;
    }

    private static boolean nbtInitialised = false;

    public synchronized static void assertNoNBTAPI() {
        nbtInitialised = true;
    }

    public static void initialiseNBT() {
        if(nbtInitialised) {
           return;
        }
        synchronized (EMaterial.class) {
            if(nbtInitialised) {
                return;
            }
            for(EMaterial material : valuesThisVersion()) {
                try {
                    new ItemBuilder(material)
                            .addTag("gamer", "gamer").build();
                    material.noNBT = false;
                } catch (Exception e) {
                    material.noNBT = true;
                }
            }
            nbtInitialised = true;
        }
    }

    @Nullable
    public static MinecraftVersion getVersion() {
        return version;
    }

    @Immutable
    private static class EMaterialData {
        private final String name;
        private final short durability;
        private final int lowestVersion;

        public EMaterialData(String name, int durability, int lowestVersion) {
            this.name = name;
            this.durability = (short) durability;
            this.lowestVersion = lowestVersion;
        }

        public EMaterialData(String name, int lowestVersion) {
            this(name, (short) 0, lowestVersion);
        }

        public String getName() {
            return name;
        }

        public short getDurability() {
            return durability;
        }

        public int getLowestVersion() {
            return lowestVersion;
        }

        @Override
        public String toString() {
            return MoreObjects.toStringHelper(this)
                    .add("name",name)
                    .add("version",lowestVersion)
                    .add("dura",durability).toString();
        }
    }
}
